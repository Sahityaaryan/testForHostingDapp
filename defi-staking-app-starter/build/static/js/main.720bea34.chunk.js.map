{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","r","vak","ky","konimal","_useState","useState","_useState2","Object","slicedToArray","contract","setContract","_useState3","_useState4","countA","setCountA","_useState5","_useState6","countB","setCountB","_useState7","_useState8","countOfC","setCountOfC","_useState9","_useState10","result","setResult","_useState11","_useState12","account","setAccount","votingOfA","_votingOfA","apply","this","arguments","asyncToGenerator","regenerator_default","a","mark","_callee2","wrap","_context2","prev","next","methods","voteA","send","from","on","receipt","document","getElementById","innerHTML","statusOfA","error","sent","setTimeout","stop","votingOfB","_votingOfB","_callee3","_context3","voteB","statusOfB","votingOfC","_votingOfC","_callee4","_context4","voteC","statusOfC","console","log","concat","_resultDeclaration","_callee5","_context5","winner","call","_endOfVoting","_callee6","_context6","setAttribute","_statusOfA","_callee7","_context7","toString","_statusOfB","_callee8","_context8","b","_statusOfC","_callee9","_context9","c","useEffect","_ref","_callee","web3","_account","networkId","contractAddress","contractABI","votingContract","_context","window","ethereum","enable","Web3","eth","getAccounts","net","getId","Voting","networks","address","accounts","abi","Contract","loadTheApp","react_default","createElement","Fragment","id","className","disabled","onClick","endOfVoting","resultDeclaration","Boolean","location","hostname","match","ReactDOM","render","components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.720bea34.chunk.js","sourcesContent":["// import React, {Component, useState} from 'react';\r\n// import './App.css'\r\n// import Web3 from 'web3';\r\n// //import Tether from '../truffle_abis/Tether.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\r\n\r\n// class App extends Component {\r\n\r\n//     async  UNSAFE_componentWillMount() {\r\n//         await this.loadWeb3();\r\n//         await this.loadBlockchainData();\r\n//     }\r\n\r\n//     async  loadWeb3() {\r\n//     if(window.ethereum) {\r\n//         window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\r\n//         await window.ethereum.enable()\r\n//     } else if(window.web3) {\r\n//         window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\r\n//     }else {\r\n//         window.alert(\"No ethereum browser detected: You can check out MetaMask\")\r\n//     }\r\n// }\r\n// // loading web3 in our react-app\r\n//     async  loadBlockchainData() {\r\n//         const web3 = window.web3;\r\n//         const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\r\n//         this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\r\n//         console.log(\"here is my account\"+account);\r\n//         const networkId = await web3.eth.net.getId();// to get the networkId\r\n\r\n//         //load randomContractName  contract to your app\r\n//         //const tetherdata = Tether.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\r\n     \r\n//     }\r\n// //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\r\n\r\n// // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\r\n//     constructor(props) {\r\n//         super(props)\r\n//         this.state = {\r\n//             account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \r\n//           //  tether: {},//creating empty objects for storing the object\r\n//         }\r\n//     }\r\n\r\n//     render() {\r\n//     return (\r\n//         <>\r\n//         <h1 className='text-center'>Jai mata di</h1>\r\n           \r\n//             </>  \r\n//     )\r\n//     }\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n//testing part---\r\n// import React, {Component, useState} from 'react';\r\n// import './App.css'\r\n// import Web3 from 'web3';\r\n// import Voting from '../truffle_abis/voting.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\r\n\r\n// class App extends Component {\r\n\r\n\r\n\r\n//     async  UNSAFE_componentWillMount() {\r\n//                 await this.loadWeb3();\r\n//                 await this.loadBlockchainData();\r\n//             }\r\n        \r\n//             async  loadWeb3() {\r\n//             if(window.ethereum) {\r\n//                 window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\r\n//                 await window.ethereum.enable()\r\n//             } else if(window.web3) {\r\n//                 window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\r\n//             }else {\r\n//                 window.alert(\"No ethereum browser detected: You can check out MetaMask\")\r\n//             }\r\n//         }\r\n//         // loading web3 in our react-app\r\n        \r\n//             async  loadBlockchainData() {\r\n//                 const web3 = window.web3;\r\n//                 const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\r\n//                 this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\r\n//                 console.log(\"here is my account\"+account);\r\n//                 const networkId = await web3.eth.net.getId();// to get the networkId\r\n//                // to get the networkId\r\n//                 console.log(`network id is ${networkId}`);\r\n        \r\n//                 //load Voting  contract to your app\r\n             \r\n//                 const votingData = Voting.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\r\n//                 // console.log(votingData.address);\r\n//                 if(votingData) {\r\n//                     const voting = new web3.eth.Contract( Voting.abi, votingData.address )\r\n                    \r\n//                     //  console.log(votingData.address);\r\n//                     this.setState({voting: voting});\r\n//                     let counter = await voting.methods.counter().call();\r\n//                     this.setState({counter: counter.toString() })\r\n//                     console.log({counter: counter})\r\n//                     // let person = await voting.methods.person.call();\r\n//                     // this.setState({person: person})// problem that wether it willl be converted to string or not\r\n                    \r\n                    \r\n//                 }\r\n//                 else{\r\n//                     console.log(`Error while loading the contract or either networkId has some Issues`)\r\n//                 }\r\n\r\n\r\n//                 this.setState({loading: false});\r\n//              }\r\n      \r\n         \r\n//         //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\r\n        \r\n//         // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\r\n//         constructor(props) {\r\n//                 super(props);\r\n//                 this.state = {\r\n//                     account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \r\n//                    voting: {},//creating empty objects for storing the object\r\n//                    counter:'0',\r\n//                    person: 'false',\r\n//                    loading: true\r\n//                 }\r\n//             }\r\n        \r\n//             render() {\r\n                \r\n//              let content;\r\n                \r\n//                 {this.state.loading ? content= <p id=\"loader\" className='text-center' style={{margin:'30px'}} >Loading Please Wait....</p> : content= <div>\r\n//                <p> <button style={{margin:'2rem',}}> Vote</button></p>\r\n//                 <p><button  >count:  </button></p>\r\n//                 <p> {this.props.counter}</p>\r\n//                 <p>\r\n//                 <button>{this.props.person} person</button>\r\n//                 </p>\r\n                \r\n\r\n//             </div>}\r\n//             return (\r\n//                 <>\r\n//                 <div className='container-fluid mt-6'> \r\n//                 <div className='row'>\r\n//                     {content}\r\n//                      </div>\r\n//                 </div>\r\n//                     </>  \r\n//             )\r\n//             }\r\n//         }\r\n        \r\n//         export default App;\r\n        \r\n// import Voting from \"../truffle_abis/voting.json\"\r\n// import React, { useState, useEffect } from \"react\";\r\n// import Web3 from \"web3\";\r\n// import \"./App.css\";\r\n\r\n// function App() {\r\n//   const [contract, setContract] = useState(null);\r\n//   const [person, setPerson] = useState(false);\r\n//   const [counter, setCounter] = useState(0);\r\n\r\n//   // Load the contract on component mount\r\n//   useEffect(() => {\r\n//     const loadTheApp = async () => {\r\n//       // Connect to Ethereum network\r\n//       if (window.ethereum) {\r\n//         await window.ethereum.enable();\r\n//         const web3 = new Web3(window.ethereum);\r\n\r\n//         // Load the network\r\n//         const networkId = await web3.eth.net.getId();\r\n//         const contractAddress=  Voting.networks[networkId].address;\r\n//         const contractABI = Voting.abi;\r\n//         const votingContract = new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n//         setContract(votingContract);\r\n//       }\r\n//     };\r\n\r\n//     loadTheApp();\r\n//   }, []);\r\n\r\n//   // Handle the voting button click\r\n//   const handleVoteClick = async () => {\r\n//     try {\r\n//       await contract.methods.Vote().send({ from: window.ethereum.selectedAddress });\r\n\r\n//       // Update the state\r\n//       const newCounter = await contract.methods.counter().call();\r\n//       setCounter(parseInt(newCounter));\r\n\r\n//       if (newCounter === \"10\") {\r\n//         setPerson(true);\r\n//       }\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>Smart Contract Voting</h1>\r\n//       <p>Counter: {counter}</p>\r\n//       {person ? (\r\n//         <p>The person has voted 10 times.</p>\r\n//       ) : (\r\n//         <button onClick={handleVoteClick}>Vote</button>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\n//      const contractAddress=  Voting.networks[5777].address;\r\n// const contractABI = Voting.abi;\r\n         \r\n\r\n// try 14-04-23\r\n\r\n// import React, {Component, useState} from 'react';\r\n// import ReactDOM from 'react-dom';\r\n// import './App.css'\r\n// import Web3 from 'web3';                                                                                                                                                       \r\n// import Voting from '../truffle_abis/voting.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\r\n\r\n// export default function App() {\r\n//         var votingContract;\r\n//         var userAccount;\r\n       \r\n//         var [votingContract, setVotingContract] = useState(undefined);\r\n//         var [account, setAccount] = useState(undefined);\r\n//         var [counting, setCounting] = useState(0);\r\n//         var [reaction, setReaction] = useState(undefined);\r\n//         var [person, setPersonStatus] = useState(undefined);\r\n\r\n\r\n\r\n\r\n//         async function startApp(){\r\n//                     if(window.ethereum){\r\n//                        window.web3 = new Web3(window.ethereum);\r\n//                        await window.ethereum.enable();     \r\n//                     } else if(window.web3) {\r\n//                          window.web3 = new Web3(window.web3.currentProvider)\r\n//                     }else {\r\n//                         console.log(\"No ethereum browser detected: You can check out MetaMask\")\r\n//                     }                \r\n//                 }\r\n//                 async function loadingBlockchainData() {\r\n//                     await startApp();\r\n//                     const web3= window.web3;\r\n//                     userAccount = await web3.eth.getAccounts();// this is to get the connected account on the browser from the MetaMask\r\n//                     setAccount(userAccount);\r\n//                    const networkId = await web3.eth.net.getId();\r\n//                    const votingData = Voting.networks[networkId];\r\n                   \r\n//                    //now loading our smart conntract\r\n//                    if(votingData){\r\n//                        var contractAddress= votingData.address;\r\n\r\n//                        var voting = new web3.eth.Contract( Voting.abi, contractAddress );\r\n//                        setVotingContract(voting);\r\n//                    }\r\n//                    else{\r\n//                     console.log(\"your votingData is not loaded yet!!\")\r\n//                    }\r\n//                 }\r\n//                 // var permission\r\n//                 // async function permToVote() {\r\n//                 //     permission= await votingContract.methods.Vote().send({from : userAccount, gas: 3000000})\r\n//                 //     .on('receipt', function (reciept){\r\n//                 //             setReaction(`user have successfully voted`);\r\n//                 //     }).on('error', function(error) {\r\n//                 //         setReaction(`user vote isn't updated by the following error=> ${error}`)\r\n//                 //     })\r\n//                 // } \r\n\r\n//                        var counted;\r\n//                 async function counter() {\r\n//                     counted= await votingContract.methods.Vote().send({from : userAccount, gas: 3000000})\r\n//                     .on('receipt', function (reciept){\r\n//                             setReaction(`user have successfully voted`);\r\n//                     }).on('error', function(error) {\r\n//                         setReaction(`user vote isn't updated by the following error=> ${error}`)\r\n//                     })\r\n//                 } \r\n//                 var counting;\r\n//                async function countingStatus() {\r\n//                 counting= await votingContract.methods.counter().call();\r\n//                 setCounting(counting);\r\n//                }\r\n                 \r\n//                var personn;\r\n//                async function personStatus() {\r\n//                 personn = await votingContract.methods.n().call();\r\n//                 setPersonStatus(personn)\r\n//                }\r\n    \r\n//         return(\r\n//             <div id='container'>\r\n//             <h1>hello world</h1>\r\n//             <h2>now get the right to vote by clicking the button below</h2>\r\n//             <button onClick={loadingBlockchainData()}>vote</button>\r\n//             <h2>counter</h2>\r\n//             <button onClick={counter()}>counter</button>\r\n//             <p id='txtStatus'> {reaction}</p>\r\n//             <button onClick={countingStatus()}>Counting status</button>\r\n//             <p id='countingStatusOnSite'> {counting}</p>\r\n//             <button onClick={personStatus()}>person status</button>\r\n//             <p id='personStatusOnSite'> {person}</p>\r\n//             </div>\r\n//         )\r\n//  }\r\n\r\n\r\n\r\n\r\n\r\n// import Voting from \"../truffle_abis/voting.json\"\r\n// import React, { useState, useEffect } from \"react\";\r\n// import Web3 from \"web3\";\r\n// import \"./App.css\";\r\n\r\n// function App() {\r\n//     const [address, setAddress] = useState('0x0');\r\n//   const [contract, setContract] = useState(null);\r\n//   const [person, setPerson] = useState(false);\r\n//   const [counter, setCounter] = useState(0);\r\n\r\n//   // Load the contract on component mount\r\n//   useEffect(() => {\r\n//     const loadTheApp = async () => {\r\n//       // Connect to Ethereum network\r\n//       if (window.ethereum) {\r\n//         await window.ethereum.enable();\r\n//         const web3 = new Web3(window.ethereum);\r\n\r\n//         // Load the network\r\n//         const networkId = await web3.eth.net.getId();\r\n//         console.log(`the networkId is => ${networkId}`)\r\n//         const contractAddress=  Voting.networks[networkId].address;\r\n//         setAddress(contractAddress);\r\n//         const contractABI = Voting.abi;\r\n//         const votingContract = new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n//         setContract(votingContract);\r\n        \r\n//       }\r\n//     };  \r\n\r\n//     loadTheApp();\r\n//   }, []);\r\n  \r\n\r\n//   // Handle the voting button click\r\n//   const handleVoteClick = async () => {\r\n//     try {\r\n//       await contract.methods.Vote().send({ from: window.ethereum.selectedAddress, gas: 3000000 });\r\n\r\n//       // Update the state\r\n//       const newCounter = await contract.methods.counter().call();\r\n//       setCounter(parseInt(newCounter));\r\n//     //   console.log(`counter is => `+counter)\r\n\r\n//       if (newCounter === \"13\") {\r\n//         setPerson(true);\r\n//       }\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n\r\n\r\n//     <div className=\"App\">\r\n//       <h1>Smart Contract Voting</h1>\r\n//       <p>Counter: {counter}</p>\r\n//       {person ? (\r\n//         <p>The person has voted 10 times.</p>\r\n//       ) : (\r\n//         <button onClick={handleVoteClick}>Vote</button>\r\n//       )}\r\n//     </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n\r\n/// improved voting \r\n\r\nimport Voting from \"../truffle_abis/voting.json\"\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport \"./App.css\";\r\n//start: 15:03\r\nfunction App() {\r\n\r\n  const [contract, setContract] = useState(null);\r\n  const [countA, setCountA] = useState('0');\r\n  const [countB, setCountB] = useState('0');\r\n  const [countOfC, setCountOfC] = useState('0');\r\n  const [result, setResult] = useState('result will be declared soon');\r\n  const [account, setAccount] = useState('account will be updated soon');\r\n\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n        const loadTheApp = async () => {\r\n          // Connect to Ethereum network\r\n          if (window.ethereum) {\r\n            await window.ethereum.enable();\r\n            const web3 = new Web3(window.ethereum);\r\n\r\n            ///getting the account\r\n             \r\n        const account = await web3.eth.getAccounts();\r\n        setAccount(account[0]);\r\n            // Load the network\r\n            const networkId = await web3.eth.net.getId();\r\n            const contractAddress=  Voting.networks[networkId].address.toString();// fetching the system from thi abis\r\n            console.log(typeof contractAddress);\r\n            console.log(web3.eth.accounts[0]);\r\n            console.log(contractAddress)\r\n            const contractABI = Voting.abi;\r\n            console.log(`contractAbi is= `+contractABI)\r\n            const votingContract = new web3.eth.Contract(contractABI, contractAddress);\r\n            \r\n            setContract(votingContract);\r\n            \r\n          }\r\n        };  \r\n        \r\n        \r\n        loadTheApp();\r\n      }, []);\r\n      console.log(`contract is => ${contract}`)\r\n      \r\n          let votea;\r\n        \r\n          async function votingOfA() {\r\n            if(contract !== null) {\r\n              votea= await contract.methods.voteA().send({from: account})\r\n              .on(\"receipt\", function(receipt) {\r\n              \r\n                let voteStatusForA = document.getElementById('voteStatusForA');\r\n                voteStatusForA.innerHTML= `voting for party A has been done`;\r\n\r\n                statusOfA();\r\n              })\r\n              .on(\"error\", function(error) {\r\n                \r\n                let voteStatusForA = document.getElementById('voteStatusForA');\r\n                voteStatusForA.innerHTML= `Something went wrong while voting`;\r\n              })\r\n            }\r\n            else{\r\n              setTimeout(()=>{\r\n                votingOfA();\r\n              },100)\r\n            }\r\n          }\r\n          let voteb;\r\n        \r\n          async function votingOfB() {\r\n            if(contract!==null){\r\n              voteb= await contract.methods.voteB().send({from: account})\r\n              .on(\"receipt\", function(receipt) {\r\n                \r\n                let voteStatusForB = document.getElementById('voteStatusForB');\r\n                voteStatusForB.innerHTML=`voting for party B has been done`;\r\n\r\n                statusOfB();\r\n              })\r\n              .on(\"error\", function(error) {\r\n                  let voteStatusForB = document.getElementById('voteStatusForB');\r\n                voteStatusForB.innerHTML= `Something went wrong while voting`;\r\n              })\r\n            }\r\n            else{\r\n              setTimeout(()=>{\r\n                votingOfB();\r\n              },100)\r\n            }\r\n          }\r\n          let votec;\r\n         \r\n          async function votingOfC() {\r\n            if(contract !== null){\r\n              votec= await contract.methods.voteC().send({from: account})\r\n              .on(\"receipt\", function(receipt) {\r\n                let voteStatusForC = document.getElementById('voteStatusForC');\r\n                voteStatusForC.innerHTML = `voting for party C has been done`;\r\n\r\n               try {\r\n                statusOfC();\r\n               } catch (error) {\r\n                console.log(`can't update the counting of c in the valid place=> ${error}`);\r\n               }\r\n              })\r\n              .on(\"error\", function(error) {\r\n                  console.log(`error from voting of c = ${error}`)\r\n                let voteStatusForC = document.getElementById('voteStatusForC');\r\n                voteStatusForC.innerHTML=  `Something went wrong while voting`;;\r\n              })\r\n            }\r\n            else{\r\n              setTimeout(()=>{\r\n                votingOfC();\r\n              },100)\r\n            }\r\n          }\r\n\r\n          \r\n          useEffect(()=>{\r\n            console.log(result);\r\n            let resultsOfVoting = document.getElementById('resultsOfVoting');\r\n                resultsOfVoting.innerHTML = result;\r\n    \r\n  },[result]);\r\n            let r;\r\n          async function resultDeclaration() {\r\n            r= await contract.methods.winner().call();\r\n              setResult(r);\r\n          }\r\n\r\n          async function endOfVoting() {\r\n           \r\n            let buttonForA = document.getElementById('buttonForA');\r\n            buttonForA.setAttribute(\"disabled\", true);\r\n            let buttonForB = document.getElementById('buttonForB');\r\n            buttonForB.setAttribute(\"disabled\", true);\r\n            let buttonForC = document.getElementById('buttonForC');\r\n            buttonForC.setAttribute(\"disabled\", true);\r\n          }\r\n\r\n          useEffect(()=>{\r\n            console.log(countA);\r\n            let statusForA = document.getElementById('statusForA');\r\n            statusForA.innerHTML = countA;\r\n          },[countA])\r\n            let vak;\r\n          async function statusOfA() {\r\n              vak = await contract.methods.a().call();\r\n              console.log('a is called'+vak);\r\n              console.log(`type of vak = ${typeof vak}`)\r\n              setCountA(vak.toString());\r\n          }\r\n\r\n          \r\n          useEffect(()=>{\r\n            console.log(\"now i am in the status of b\");\r\n            console.log(countB);\r\n            let statusForB = document.getElementById('statusForB');\r\n            statusForB.innerHTML = countB;\r\n          },[countB])\r\n            let ky;\r\n          async function statusOfB() {\r\n              ky = await contract.methods.b().call();\r\n              console.log('b is called'+vak);\r\n              console.log(`type of ky = ${typeof ky}`)\r\n              setCountB(ky.toString());\r\n          }\r\n\r\n\r\n          useEffect(()=>{// the useEffect of C is not working\r\n            console.log(countOfC);\r\n            let statusForC = document.getElementById('statusForC');\r\n            statusForC.innerHTML = countOfC;\r\n          },[countOfC])\r\n            let konimal;\r\n          async function statusOfC() {\r\n            konimal = await contract.methods.c().call();\r\n            // konimal = 'ab to update karo';\r\n              console.log('c is called'+konimal);\r\n              console.log(`type of konimal = ${typeof konimal}`)\r\n              setCountOfC(konimal);\r\n          }\r\n          \r\n          async function reset() {\r\n            setCountA(0);\r\n            setCountB(0);\r\n            setCountOfC(0);\r\n          }\r\n          \r\n\r\n\r\n  return(\r\n      <>\r\n      <div id=\"heading\">creating an improved version of the voting in India</div>\r\n      <div id=\"accountName\"> Account: {account}</div>\r\n      \r\n\r\n      <div id=\"voteContainer\">\r\n        <div className=\"votingBallot\">\r\n        <h2 id=\"votingSectionOfA\">A</h2>\r\n        <p id=\"statusForA\"></p>\r\n\r\n        <button disabled={!contract}  id=\"buttonForA\" className=\"votingButtons\" onClick={()=> {\r\n          votingOfA(); \r\n          }}>Vote</button>\r\n\r\n        <p id=\"voteStatusForA\"></p>\r\n        </div>\r\n        <div className=\"votingBallot\">\r\n        <h2 id=\"votingSectionOfB\">B</h2>\r\n        <p id=\"statusForB\" ></p>\r\n        <button disabled={!contract} id=\"buttonForB\" className=\"votingButtons\" onClick={()=> {\r\n          votingOfB();\r\n\r\n          }}>Vote</button>\r\n       <p id=\"voteStatusForB\"></p>\r\n        </div>\r\n\r\n\r\n        <div className=\"votingBallot\">\r\n        <h2 id=\"votingSectionOfC\">C</h2>\r\n        <p id=\"statusForC\"> </p>\r\n        <button disabled={!contract} id=\"buttonForC\"  className=\"votingButtons\" onClick={()=> {votingOfC();}}>Vote</button>\r\n        <p id=\"voteStatusForC\"></p>\r\n        </div>\r\n      </div>  \r\n\r\n      <div id=\"endVoting\"> <button onClick={()=>{ endOfVoting();}}>End Voting</button></div>\r\n      <div id=\"showingResults\">\r\n      <div id=\"results\"><button onClick={()=>{ \r\n        resultDeclaration();\r\n        statusOfA();\r\n        statusOfB();\r\n        statusOfC();\r\n        }}>Show Results</button></div>\r\n      <div id=\"boxContainingResult\"><p id=\"resultsOfVoting\"></p></div>\r\n      </div>\r\n      \r\n      </>\r\n\r\n  )\r\n  }\r\n  export default App;\r\n  // problem\r\n\r\n  //1. why I the innerHTML is not working \r\n  //2. and findout the new error of metaMask","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n<>\r\n<App />\r\n</>\r\n\r\n, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}